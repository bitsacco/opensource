generator client {
  provider      = "prisma-client-js"
  output        = "./client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MpesaOnrampSwap {
  /// Unique identifier for the swap
  id                String               @id @default(uuid())
  /// Tracks progress of the swap
  state             SwapTransactionState
  /// References the user who made the transaction
  reference         String
  /// Lightning invoice to pay.
  lightning         String
  /// References the fiat onramp collection ID
  collectionTracker String               @unique
  /// Fx Rate from 
  rate              String
  /// Amount in satoshi
  amountSats        String
  /// Retry count tracker
  retryCount        Int
  /// Timestamps
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
}

model MpesaOfframpSwap {
  /// Unique identifier for the swap
  id             String               @id
  /// Tracks progress of the swap
  state          SwapTransactionState
  /// References the user who made the transaction
  reference      String
  /// Lightning invoice to be paid before offramp can proceed
  lightning      String
  /// Phone number to send mpesa the payment
  phone          String
  /// References the fiat offramp payment ID
  paymentTracker String?              @unique
  /// Fx Rate
  rate           String
  /// Amount in satoshi
  amountSats     String
  /// Retry count tracker
  retryCount     Int
  /// Timestamps
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

enum SwapTransactionState {
  PENDING
  PROCESSING
  FAILED
  COMPLETE
  RETRY
}
