syntax = "proto3";

package swap;

// SwapService: Defines the main service for handling swap operations.
service SwapService {
  // GetQuote: Retrieves a quote for a currency swap.
  rpc GetQuote (QuoteRequest) returns (QuoteResponse) {}

  // CreateOnrampSwap: Initiates an onramp swap transaction.
  rpc CreateOnrampSwap (OnrampSwapRequest) returns (OnrampSwapResponse) {}

  // FindOnrampSwap: Finds and returns a single onramp swap.
  rpc FindOnrampSwap (FindSwapRequest) returns (OnrampSwapResponse) {}

  rpc listOnrampSwaps (PaginatedRequest) returns (PaginatedOnrampSwapResponse) {}
}

// Empty: Represents an empty message.
message Empty {}

// QuoteRequest: Represents a request for a currency swap quote.
message QuoteRequest {
  // Currency to swap from
  Currency from = 1;
  // Currency to swap to
  Currency to = 2;

  reserved 3, 4, 5, 6, 7, 8, 9;

  // Optional amount to quote for
  // If provided, the service will return a quote for the specified amount
  optional string amount = 10;
}

// QuoteResponse: Represents the response for a currency swap quote.
message QuoteResponse {
  // Unique identifier for the quote
  string id = 1;
  // Currency being swapped from
  Currency from = 2;
  // Currency being swapped to
  Currency to = 3;
  // Exchange rate for the swap
  string rate = 4;
  // Expiry time (UNIX) for the quote
  string expiry = 5;

  reserved 6, 7, 8, 9;

  // Optional amount to be paid in target currency
  // Only available if amount was specified
  optional string amount = 10;
  // Optional fee for the swap
  // Only available if amount was specified
  optional string fee = 11;
}

// Quote: Represents a currency swap quote.
message Quote {
  // Optional quote ID to reference a quote.
  // If not specified, the service will create a new quote for the swap
  string id = 1;

  // If the quote is expired, allow the service can refresh the quote
  // should it expire before swap
  bool refresh_if_expired = 2;
}

// OnrampSwapRequest: Represents a request to create an onramp swap.
message OnrampSwapRequest {
  // Optional reference to a quote.
  // If not specified, the service will create a new quote for the swap
  optional Quote quote = 1;

  // Swap initiator reference to the account this transaction is associated with.
  string ref = 2;

  // Amount to swap
  // Any transaction fees will be deducted from this amount
  string amount = 3;

  reserved 4, 5, 6, 7, 8, 9;

  // Source of the swap
  oneof source {
    // If provided, the service will attempt mobile money onramp
    string phone = 10;
  }

  // Target of the swap
  oneof target {
    // If provided, the service will attempt to pay a Lightning Network invoice
    string lightning = 11;
  }
}

// OnrampSwapResponse: Represents the response for an onramp swap.
message OnrampSwapResponse {
  // Unique identifier for the swap
  string id = 1;
  // Exchange rate used for the swap
  string rate = 2;
  // Current status of the swap
  SwapStatus status = 3;

  string userId = 4;

  string mpesaId = 5;

  string lightning = 6;

  int32 retryCount = 7;

  string createdAt = 8;

  optional string updatedAt = 9;
}

// FindSwapRequest: Represents a request to find a swap.
message FindSwapRequest {
  // Unique identifier for the swap
  string id = 1;
}

// Currency: Enum representing supported currencies.
enum Currency {
  BTC = 0;
  KES = 1;
}

// SwapStatus: Enum representing the possible statuses of a swap.
enum SwapStatus {
  PENDING = 0;
  PROCESSING = 1;
  FAILED = 2;
  COMPLETE = 3;
}

message PaginatedRequest {
  // Page offset to start from
  int32 page = 2;
  // Number of items to be return per page
  int32 size = 1;
}

message PaginatedOnrampSwapResponse {
  // List of onramp swaps
  repeated OnrampSwapResponse swaps = 1;
  // Current page offset
  int32 page = 2;
  // Number of items return per page
  int32 size = 3;
  // Number of pages given the current page size
  int32 pages = 4;
}
