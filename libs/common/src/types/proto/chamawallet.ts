// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v3.20.3
// source: chamawallet.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import {
  Bolt11,
  FindTxRequest,
  OfframpSwapTarget,
  OnrampSwapSource,
  PaginatedRequest,
  TransactionType,
} from './lib';

export enum ChamaTxStatus {
  PENDING = 0,
  PROCESSING = 1,
  FAILED = 2,
  COMPLETE = 3,
  APPROVED = 4,
  REJECTED = 5,
  UNRECOGNIZED = -1,
}

export enum Review {
  REJECT = 0,
  APPROVE = 1,
  UNRECOGNIZED = -1,
}

export interface ChamaWalletTx {
  id: string;
  memberId: string;
  chamaId: string;
  status: ChamaTxStatus;
  amountMsats: number;
  amountFiat?: number | undefined;
  lightning: Bolt11 | undefined;
  type: TransactionType;
  reviews: ChamaTxReview[];
  reference: string;
  createdAt: string;
  updatedAt?: string | undefined;
}

export interface ChamaTxReview {
  memberId: string;
  review: Review;
}

export interface ChamaDepositRequest {
  memberId: string;
  chamaId: string;
  amountFiat: number;
  reference?: string | undefined;
  onramp?: OnrampSwapSource | undefined;
  pagination?: PaginatedRequest | undefined;
}

export interface ChamaContinueDepositRequest {
  txId: string;
  amountFiat: number;
  reference?: string | undefined;
  onramp?: OnrampSwapSource | undefined;
  pagination?: PaginatedRequest | undefined;
}

export interface ChamaWithdrawRequest {
  memberId: string;
  chamaId: string;
  amountFiat: number;
  reference?: string | undefined;
  offramp?: OfframpSwapTarget | undefined;
  lightning?: Bolt11 | undefined;
  pagination?: PaginatedRequest | undefined;
}

export interface ChamaContinueWithdrawRequest {
  txId: string;
  amountFiat: number;
  reference?: string | undefined;
  offramp?: OfframpSwapTarget | undefined;
  lightning?: Bolt11 | undefined;
  pagination?: PaginatedRequest | undefined;
}

export interface ChamaTxsFilterRequest {
  memberId?: string | undefined;
  chamaId?: string | undefined;
  pagination?: PaginatedRequest | undefined;
}

export interface ChamaTxsResponse {
  txId?: string | undefined;
  ledger: PaginatedChamaTxsResponse | undefined;
  groupMeta?: ChamaTxGroupMeta | undefined;
  memberMeta?: ChamaTxMemberMeta | undefined;
}

export interface ChamaTxGroupMeta {
  groupDeposits: number;
  groupWithdrawals: number;
  currentBalance: number;
}

export interface ChamaTxMemberMeta {
  memberDeposits: number;
  memberWithdrawals: number;
  currentBalance: number;
}

export interface PaginatedChamaTxsResponse {
  transactions: ChamaWalletTx[];
  /** Current page offset */
  page: number;
  /** Number of items return per page */
  size: number;
  /** Number of pages given the current page size */
  pages: number;
}

export interface ChamaTxUpdateRequest {
  txId: string;
  updates: ChamaTxUpdates | undefined;
  pagination?: PaginatedRequest | undefined;
}

export interface ChamaTxUpdates {
  status?: ChamaTxStatus | undefined;
  amountMsats?: number | undefined;
  reviews: ChamaTxReview[];
  reference?: string | undefined;
}

export interface ChamaWalletServiceClient {
  deposit(request: ChamaDepositRequest): Observable<ChamaTxsResponse>;

  continueDeposit(
    request: ChamaContinueDepositRequest,
  ): Observable<ChamaTxsResponse>;

  withdraw(request: ChamaWithdrawRequest): Observable<ChamaTxsResponse>;

  continueWithdraw(
    request: ChamaContinueWithdrawRequest,
  ): Observable<ChamaTxsResponse>;

  updateTransaction(
    request: ChamaTxUpdateRequest,
  ): Observable<ChamaTxsResponse>;

  findTransaction(request: FindTxRequest): Observable<ChamaWalletTx>;

  filterTransactions(
    request: ChamaTxsFilterRequest,
  ): Observable<PaginatedChamaTxsResponse>;
}

export interface ChamaWalletServiceController {
  deposit(
    request: ChamaDepositRequest,
  ):
    | Promise<ChamaTxsResponse>
    | Observable<ChamaTxsResponse>
    | ChamaTxsResponse;

  continueDeposit(
    request: ChamaContinueDepositRequest,
  ):
    | Promise<ChamaTxsResponse>
    | Observable<ChamaTxsResponse>
    | ChamaTxsResponse;

  withdraw(
    request: ChamaWithdrawRequest,
  ):
    | Promise<ChamaTxsResponse>
    | Observable<ChamaTxsResponse>
    | ChamaTxsResponse;

  continueWithdraw(
    request: ChamaContinueWithdrawRequest,
  ):
    | Promise<ChamaTxsResponse>
    | Observable<ChamaTxsResponse>
    | ChamaTxsResponse;

  updateTransaction(
    request: ChamaTxUpdateRequest,
  ):
    | Promise<ChamaTxsResponse>
    | Observable<ChamaTxsResponse>
    | ChamaTxsResponse;

  findTransaction(
    request: FindTxRequest,
  ): Promise<ChamaWalletTx> | Observable<ChamaWalletTx> | ChamaWalletTx;

  filterTransactions(
    request: ChamaTxsFilterRequest,
  ):
    | Promise<PaginatedChamaTxsResponse>
    | Observable<PaginatedChamaTxsResponse>
    | PaginatedChamaTxsResponse;
}

export function ChamaWalletServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'deposit',
      'continueDeposit',
      'withdraw',
      'continueWithdraw',
      'updateTransaction',
      'findTransaction',
      'filterTransactions',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('ChamaWalletService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('ChamaWalletService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const CHAMA_WALLET_SERVICE_NAME = 'ChamaWalletService';
