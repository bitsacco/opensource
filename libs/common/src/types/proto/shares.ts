// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v3.21.12
// source: shares.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { Empty } from './lib';

export interface BuySharesRequest {
  userId: string;
  quantity: number;
}

export interface ShareDetailResponse {
  userId: string;
  shareHoldings: number;
  shares: ShareDetails[];
  shareSubscription: ShareSubscriptionResponse | undefined;
}

export interface ShareDetails {
  /** Number of shared purchased */
  quantity: number;
  /** Unix timestamp for when the shares were purchased */
  purchasedAtUnix: number;
}

export interface ShareSubscriptionResponse {
  /** Total shares issued */
  sharesIssued: number;
  /** Total shares subscribed */
  sharesSold: number;
}

export interface SharesServiceClient {
  buyShares(request: BuySharesRequest): Observable<ShareDetailResponse>;

  getShareSubscription(request: Empty): Observable<ShareSubscriptionResponse>;
}

export interface SharesServiceController {
  buyShares(
    request: BuySharesRequest,
  ):
    | Promise<ShareDetailResponse>
    | Observable<ShareDetailResponse>
    | ShareDetailResponse;

  getShareSubscription(
    request: Empty,
  ):
    | Promise<ShareSubscriptionResponse>
    | Observable<ShareSubscriptionResponse>
    | ShareSubscriptionResponse;
}

export function SharesServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['buyShares', 'getShareSubscription'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('SharesService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('SharesService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const SHARES_SERVICE_NAME = 'SharesService';
