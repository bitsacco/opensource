// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v3.21.12
// source: shares.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { Empty } from './lib';

export enum SharesTxStatus {
  PROPOSED = 0,
  PROCESSING = 1,
  APPROVED = 2,
  COMPLETE = 3,
  FAILED = 4,
  UNRECOGNIZED = -1,
}

export interface OfferSharesRequest {
  /** Number of shares to issue */
  quantity: number;
  /** Date from which the shares will be available for subscription */
  availableFrom: string;
  /**
   * Date until which the shares will be available for subscription
   * Shares can be sold out before this availability date lapses
   */
  availableTo?: string | undefined;
}

export interface SharesOffer {
  id: string;
  /** Number of shares issued */
  quantity: number;
  /** Number of shares subscribed by members */
  subscribedQuantity: number;
  /** Date from which the shares will be available for subscription */
  availableFrom: string;
  /**
   * Date until which the shares will be available for subscription
   * Shares can be sold out before this availability date lapses
   */
  availableTo?: string | undefined;
  createdAt: string;
  updatedAt?: string | undefined;
}

export interface AllSharesOffers {
  offers: SharesOffer[];
  totalOfferQuantity: number;
  totalSubscribedQuantity: number;
}

export interface SharesTx {
  id: string;
  userId: string;
  offerId: string;
  quantity: number;
  status: SharesTxStatus;
  transfer?: SharesTxTransferMeta | undefined;
  createdAt: string;
  updatedAt?: string | undefined;
}

export interface SharesTxTransferMeta {
  fromUserId: string;
  toUserId: string;
  quantity: number;
}

export interface SubscribeSharesRequest {
  userId: string;
  offerId: string;
  quantity: number;
}

export interface TransferSharesRequest {
  fromUserId: string;
  toUserId: string;
  sharesId: string;
  quantity: number;
}

export interface UpdateSharesRequest {
  sharesId: string;
  updates: SharesTxUpdates | undefined;
}

export interface SharesTxUpdates {
  quantity?: number | undefined;
  status?: SharesTxStatus | undefined;
  transfer?: SharesTxTransferMeta | undefined;
  offerId?: string | undefined;
}

export interface UserSharesTxsRequest {
  userId: string;
}

export interface UserShareTxsResponse {
  userId: string;
  shareHoldings: number;
  shares: SharesTx[];
  offers: AllSharesOffers | undefined;
}

export interface AllSharesTxsResponse {
  shares: SharesTx[];
  offers: AllSharesOffers | undefined;
}

export interface SharesServiceClient {
  offerShares(request: OfferSharesRequest): Observable<AllSharesOffers>;

  getSharesOffers(request: Empty): Observable<AllSharesOffers>;

  subscribeShares(
    request: SubscribeSharesRequest,
  ): Observable<UserShareTxsResponse>;

  transferShares(
    request: TransferSharesRequest,
  ): Observable<UserShareTxsResponse>;

  updateShares(request: UpdateSharesRequest): Observable<UserShareTxsResponse>;

  userSharesTransactions(
    request: UserSharesTxsRequest,
  ): Observable<UserShareTxsResponse>;

  allSharesTransactions(request: Empty): Observable<AllSharesTxsResponse>;
}

export interface SharesServiceController {
  offerShares(
    request: OfferSharesRequest,
  ): Promise<AllSharesOffers> | Observable<AllSharesOffers> | AllSharesOffers;

  getSharesOffers(
    request: Empty,
  ): Promise<AllSharesOffers> | Observable<AllSharesOffers> | AllSharesOffers;

  subscribeShares(
    request: SubscribeSharesRequest,
  ):
    | Promise<UserShareTxsResponse>
    | Observable<UserShareTxsResponse>
    | UserShareTxsResponse;

  transferShares(
    request: TransferSharesRequest,
  ):
    | Promise<UserShareTxsResponse>
    | Observable<UserShareTxsResponse>
    | UserShareTxsResponse;

  updateShares(
    request: UpdateSharesRequest,
  ):
    | Promise<UserShareTxsResponse>
    | Observable<UserShareTxsResponse>
    | UserShareTxsResponse;

  userSharesTransactions(
    request: UserSharesTxsRequest,
  ):
    | Promise<UserShareTxsResponse>
    | Observable<UserShareTxsResponse>
    | UserShareTxsResponse;

  allSharesTransactions(
    request: Empty,
  ):
    | Promise<AllSharesTxsResponse>
    | Observable<AllSharesTxsResponse>
    | AllSharesTxsResponse;
}

export function SharesServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'offerShares',
      'getSharesOffers',
      'subscribeShares',
      'transferShares',
      'updateShares',
      'userSharesTransactions',
      'allSharesTransactions',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('SharesService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('SharesService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const SHARES_SERVICE_NAME = 'SharesService';
